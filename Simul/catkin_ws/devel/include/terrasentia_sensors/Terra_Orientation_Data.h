// Generated by gencpp from file terrasentia_sensors/Terra_Orientation_Data.msg
// DO NOT EDIT!


#ifndef TERRASENTIA_SENSORS_MESSAGE_TERRA_ORIENTATION_DATA_H
#define TERRASENTIA_SENSORS_MESSAGE_TERRA_ORIENTATION_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <terrasentia_sensors/Euler_Base.h>
#include <terrasentia_sensors/Quaternion_Base.h>

namespace terrasentia_sensors
{
template <class ContainerAllocator>
struct Terra_Orientation_Data_
{
  typedef Terra_Orientation_Data_<ContainerAllocator> Type;

  Terra_Orientation_Data_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , w(0.0)
    , covariance()
    , bias()  {
    }
  Terra_Orientation_Data_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , w(0.0)
    , covariance(_alloc)
    , bias(_alloc)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _w_type;
  _w_type w;

   typedef  ::terrasentia_sensors::Euler_Base_<ContainerAllocator>  _covariance_type;
  _covariance_type covariance;

   typedef  ::terrasentia_sensors::Quaternion_Base_<ContainerAllocator>  _bias_type;
  _bias_type bias;





  typedef boost::shared_ptr< ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> const> ConstPtr;

}; // struct Terra_Orientation_Data_

typedef ::terrasentia_sensors::Terra_Orientation_Data_<std::allocator<void> > Terra_Orientation_Data;

typedef boost::shared_ptr< ::terrasentia_sensors::Terra_Orientation_Data > Terra_Orientation_DataPtr;
typedef boost::shared_ptr< ::terrasentia_sensors::Terra_Orientation_Data const> Terra_Orientation_DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator1> & lhs, const ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.w == rhs.w &&
    lhs.covariance == rhs.covariance &&
    lhs.bias == rhs.bias;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator1> & lhs, const ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace terrasentia_sensors

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e34d80bf8481ce2ab0668f1f26f72964";
  }

  static const char* value(const ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe34d80bf8481ce2aULL;
  static const uint64_t static_value2 = 0xb0668f1f26f72964ULL;
};

template<class ContainerAllocator>
struct DataType< ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "terrasentia_sensors/Terra_Orientation_Data";
  }

  static const char* value(const ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"Euler_Base covariance\n"
"Quaternion_Base bias\n"
"\n"
"================================================================================\n"
"MSG: terrasentia_sensors/Euler_Base\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"\n"
"================================================================================\n"
"MSG: terrasentia_sensors/Quaternion_Base\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.w);
      stream.next(m.covariance);
      stream.next(m.bias);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Terra_Orientation_Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::terrasentia_sensors::Terra_Orientation_Data_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "w: ";
    Printer<double>::stream(s, indent + "  ", v.w);
    s << indent << "covariance: ";
    s << std::endl;
    Printer< ::terrasentia_sensors::Euler_Base_<ContainerAllocator> >::stream(s, indent + "  ", v.covariance);
    s << indent << "bias: ";
    s << std::endl;
    Printer< ::terrasentia_sensors::Quaternion_Base_<ContainerAllocator> >::stream(s, indent + "  ", v.bias);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TERRASENTIA_SENSORS_MESSAGE_TERRA_ORIENTATION_DATA_H
