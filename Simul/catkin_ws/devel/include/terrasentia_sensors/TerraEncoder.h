// Generated by gencpp from file terrasentia_sensors/TerraEncoder.msg
// DO NOT EDIT!


#ifndef TERRASENTIA_SENSORS_MESSAGE_TERRAENCODER_H
#define TERRASENTIA_SENSORS_MESSAGE_TERRAENCODER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace terrasentia_sensors
{
template <class ContainerAllocator>
struct TerraEncoder_
{
  typedef TerraEncoder_<ContainerAllocator> Type;

  TerraEncoder_()
    : stamp()
    , id(0)
    , position(0.0)
    , speed(0.0)
    , qpps(0.0)  {
    }
  TerraEncoder_(const ContainerAllocator& _alloc)
    : stamp()
    , id(0)
    , position(0.0)
    , speed(0.0)
    , qpps(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _id_type;
  _id_type id;

   typedef double _position_type;
  _position_type position;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _qpps_type;
  _qpps_type qpps;





  typedef boost::shared_ptr< ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> const> ConstPtr;

}; // struct TerraEncoder_

typedef ::terrasentia_sensors::TerraEncoder_<std::allocator<void> > TerraEncoder;

typedef boost::shared_ptr< ::terrasentia_sensors::TerraEncoder > TerraEncoderPtr;
typedef boost::shared_ptr< ::terrasentia_sensors::TerraEncoder const> TerraEncoderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::terrasentia_sensors::TerraEncoder_<ContainerAllocator1> & lhs, const ::terrasentia_sensors::TerraEncoder_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.id == rhs.id &&
    lhs.position == rhs.position &&
    lhs.speed == rhs.speed &&
    lhs.qpps == rhs.qpps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::terrasentia_sensors::TerraEncoder_<ContainerAllocator1> & lhs, const ::terrasentia_sensors::TerraEncoder_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace terrasentia_sensors

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2549cfa0ef2aec74010dcef181ee872";
  }

  static const char* value(const ::terrasentia_sensors::TerraEncoder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2549cfa0ef2aec7ULL;
  static const uint64_t static_value2 = 0x4010dcef181ee872ULL;
};

template<class ContainerAllocator>
struct DataType< ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "terrasentia_sensors/TerraEncoder";
  }

  static const char* value(const ::terrasentia_sensors::TerraEncoder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"int32 id\n"
"float64 position\n"
"float64 speed\n"
"float64 qpps\n"
;
  }

  static const char* value(const ::terrasentia_sensors::TerraEncoder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.speed);
      stream.next(m.qpps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TerraEncoder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::terrasentia_sensors::TerraEncoder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::terrasentia_sensors::TerraEncoder_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "qpps: ";
    Printer<double>::stream(s, indent + "  ", v.qpps);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TERRASENTIA_SENSORS_MESSAGE_TERRAENCODER_H
